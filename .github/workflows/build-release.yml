name: Build KeybowFlow Release Artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.13'
  BUNDLE_VERSION: '20250810'

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5.0.0
      with:
        submodules: recursive
      
    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        
    - name: Create build directory
      run: |
        mkdir -p build/keybowflow-device-files
        mkdir -p build/dist
        
    - name: Copy project files
      run: |
        # Copy core source files
        cp -r src/* build/keybowflow-device-files/
        
        # Copy examples
        cp -r examples build/keybowflow-device-files/
        
        # Copy documentation
        mkdir -p build/keybowflow-device-files/docs
        cp README.md build/keybowflow-device-files/
        cp docs/INSTALLATION.md build/keybowflow-device-files/docs/
        cp docs/CONFIGURATION_GUIDE.md build/keybowflow-device-files/docs/
        cp docs/KEY_REFERENCE.md build/keybowflow-device-files/docs/
        cp docs/ACTION_REFERENCE.md build/keybowflow-device-files/docs/
        cp CHANGELOG.md build/keybowflow-device-files/
        cp scripts/deploy.py build/keybowflow-device-files/
        cp requirements.txt build/keybowflow-device-files/
        
    - name: Download CircuitPython libraries
      run: |
        cd build/keybowflow-device-files
        
        # Create lib directory
        mkdir -p lib
        
        # Copy PMK from submodule (version pinned via git)
        if [ -d "../../lib/pmk/lib/pmk" ]; then
          echo "Copying PMK from submodule"
          cp -r ../../lib/pmk/lib/pmk lib/
        else
          echo "PMK submodule not found"
          exit 1
        fi
        
        # Download Adafruit CircuitPython Bundle for CircUp-managed libraries
        echo "Downloading CircuitPython bundle..."
        
        # Pin to specific version for reproducible builds
        BUNDLE_VERSION="${{ env.BUNDLE_VERSION }}"
        BUNDLE_URL="https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/download/${BUNDLE_VERSION}/adafruit-circuitpython-bundle-py-${BUNDLE_VERSION}.zip"
        
        echo "Downloading pinned version: $BUNDLE_VERSION"
        echo "URL: $BUNDLE_URL"
        wget "$BUNDLE_URL" -O bundle.zip
        
        # Extract and copy required Adafruit libraries
        unzip -q bundle.zip
        BUNDLE_DIR=$(find . -name "adafruit-circuitpython-bundle-*" -type d)
        
        # Copy required Adafruit libraries based on requirements.txt
        cp -r "$BUNDLE_DIR/lib/adafruit_hid" lib/
        cp -r "$BUNDLE_DIR/lib/adafruit_bus_device" lib/
        cp -r "$BUNDLE_DIR/lib/adafruit_is31fl3731" lib/
        
        # Clean up
        rm -rf bundle.zip "$BUNDLE_DIR"
        
    - name: Create device-ready ZIP
      run: |
        cd build/keybowflow-device-files
        zip -r ../dist/keybowflow-device-files.zip . -x "*.git*" "*.DS_Store*"
        
    - name: Create example configurations ZIP
      run: |
        cd build/keybowflow-device-files/examples
        zip -r ../../dist/keybow-examples.zip . -x "*.git*" "*.DS_Store*"
        
    - name: Download CircuitPython UF2 firmware
      run: |
        # Download CircuitPython 9.2.8 for Keybow 2040
        wget https://downloads.circuitpython.org/bin/pimoroni_keybow2040/en_US/adafruit-circuitpython-pimoroni_keybow2040-en_US-9.2.8.uf2 -O build/dist/circuitpython-keybow2040-9.2.8.uf2
        
    - name: Copy installation guide
      run: |
        # Copy installation guide from source
        cp docs/INSTALLATION.md build/dist/INSTALLATION.md
        
        # Copy user reference documentation
        cp docs/CONFIGURATION_GUIDE.md build/dist/CONFIGURATION_GUIDE.md
        cp docs/KEY_REFERENCE.md build/dist/KEY_REFERENCE.md
        cp docs/ACTION_REFERENCE.md build/dist/ACTION_REFERENCE.md
        
        # Copy third-party license information
        cp docs/THIRD_PARTY_LICENSES.md build/dist/THIRD_PARTY_LICENSES.md
        
        # Copy changelog
        cp CHANGELOG.md build/dist/CHANGELOG.md
        
        # Copy main project license
        cp LICENSE build/dist/LICENSE.txt
        
    - name: Create version info
      run: |
        echo "Build Date: $(date)" > build/dist/VERSION.txt
        echo "Git Commit: ${{ github.sha }}" >> build/dist/VERSION.txt
        echo "Release Tag: ${{ github.ref_name || github.event.inputs.version }}" >> build/dist/VERSION.txt
        echo "CircuitPython: 9.2.8" >> build/dist/VERSION.txt
        
    - name: Generate release body
      id: release_body
      run: |
        # Generate release body from template
        RELEASE_BODY=$(python .github/scripts/generate_release.py \
          "${{ github.ref_name || github.event.inputs.version }}" \
          "9.2.8" \
          "${{ github.sha }}")
        
        # Save to environment for use in release step
        echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: keybow-release-${{ github.ref_name || github.event.inputs.version }}
        path: build/dist/
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2.3.2
      with:
        files: |
          build/dist/keybowflow-device-files.zip
          build/dist/keybow-examples.zip
          build/dist/circuitpython-keybow2040-9.2.8.uf2
          build/dist/INSTALLATION.md
          build/dist/CONFIGURATION_GUIDE.md
          build/dist/KEY_REFERENCE.md
          build/dist/ACTION_REFERENCE.md
          build/dist/THIRD_PARTY_LICENSES.md
          build/dist/LICENSE.txt
          build/dist/CHANGELOG.md
          build/dist/VERSION.txt
        body: ${{ env.RELEASE_BODY }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
